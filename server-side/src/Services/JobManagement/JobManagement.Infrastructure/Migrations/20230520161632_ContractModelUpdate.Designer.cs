// <auto-generated />
using System;
using JobManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobManagement.Infrastructure.Migrations
{
    [DbContext(typeof(JobManagementContext))]
    [Migration("20230520161632_ContractModelUpdate")]
    partial class ContractModelUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.ToTable("Answers", (string)null);
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Finished")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Started")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Contracts", (string)null);
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Professions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6861f65-0950-4c7f-b5b1-de644f923fbb"),
                            Description = "Software engineer",
                            Name = "Software engineer"
                        },
                        new
                        {
                            Id = new Guid("0c485898-d9f4-45c5-99bc-c2c8dd3e69f0"),
                            Description = "Graphic designer",
                            Name = "Graphic designer"
                        });
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Proposals", (string)null);
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ProfessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Skills", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("93098c08-85ff-4c31-994b-5dec79c17d79"),
                            Description = "Programming language",
                            Name = "C#",
                            ProfessionId = new Guid("d6861f65-0950-4c7f-b5b1-de644f923fbb")
                        },
                        new
                        {
                            Id = new Guid("ea1627e1-2d59-427d-b5b4-13ab7e944c7f"),
                            Description = "Web framework",
                            Name = "ASP.NET CORE",
                            ProfessionId = new Guid("d6861f65-0950-4c7f-b5b1-de644f923fbb")
                        },
                        new
                        {
                            Id = new Guid("5d741f6a-f024-4dca-8b1f-afccec1f72ea"),
                            Description = "Design software",
                            Name = "Adobe Illustrator",
                            ProfessionId = new Guid("0c485898-d9f4-45c5-99bc-c2c8dd3e69f0")
                        },
                        new
                        {
                            Id = new Guid("e190ca8a-5252-4b00-8128-f21d9918efaf"),
                            Description = "Design software",
                            Name = "CorelDRAW Graphics Suite",
                            ProfessionId = new Guid("0c485898-d9f4-45c5-99bc-c2c8dd3e69f0")
                        });
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExperienceLevel")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProfessionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("JobSkill", b =>
                {
                    b.Property<Guid>("JobsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uuid");

                    b.HasKey("JobsId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("JobSkill");
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Answer", b =>
                {
                    b.HasOne("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Proposal", null)
                        .WithMany("Answers")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Contract", b =>
                {
                    b.HasOne("JobManagement.Domain.AggregatesModel.JobAggregate.Job", null)
                        .WithMany("Contracts")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("JobManagement.Domain.AggregatesModel.JobAggregate.ValueObjects.Payment", "Payment", b1 =>
                        {
                            b1.Property<Guid>("ContractId")
                                .HasColumnType("uuid");

                            b1.Property<float>("Amount")
                                .HasColumnType("real");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ContractId");

                            b1.ToTable("Contracts");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Proposal", b =>
                {
                    b.HasOne("JobManagement.Domain.AggregatesModel.JobAggregate.Job", null)
                        .WithMany("Proposals")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("JobManagement.Domain.AggregatesModel.JobAggregate.ValueObjects.Payment", "Payment", b1 =>
                        {
                            b1.Property<Guid>("ProposalId")
                                .HasColumnType("uuid");

                            b1.Property<float>("Amount")
                                .HasColumnType("real");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("ProposalId");

                            b1.ToTable("Proposals");

                            b1.WithOwner()
                                .HasForeignKey("ProposalId");
                        });

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Question", b =>
                {
                    b.HasOne("JobManagement.Domain.AggregatesModel.JobAggregate.Job", null)
                        .WithMany("Questions")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Skill", b =>
                {
                    b.HasOne("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Profession", "Profession")
                        .WithMany("Skills")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Job", b =>
                {
                    b.HasOne("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("JobManagement.Domain.AggregatesModel.JobAggregate.ValueObjects.Payment", "Payment", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uuid");

                            b1.Property<float>("Amount")
                                .HasColumnType("real");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("JobSkill", b =>
                {
                    b.HasOne("JobManagement.Domain.AggregatesModel.JobAggregate.Job", null)
                        .WithMany()
                        .HasForeignKey("JobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Profession", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Entities.Proposal", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("JobManagement.Domain.AggregatesModel.JobAggregate.Job", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Proposals");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
