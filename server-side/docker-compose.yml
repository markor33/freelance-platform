version: '3.4'

services:
  identity.api:
    image: ${DOCKER_REGISTRY-}identityapi
    build:
      context: .
      dockerfile: src/Services/Identity/Identity.API/Dockerfile
    depends_on:
     - identity.db
    ports:
     - 50000:80

  job.api:
    image: ${DOCKER_REGISTRY-}jobapi
    build:
      context: .
      dockerfile: src/Services/Job/Job.API/Dockerfile
    ports:
     - 51000:80

  freelancer-profile.api:
    image: ${DOCKER_REGISTRY-}freelancerapi
    build:
      context: .
      dockerfile: src/Services/FreelancerProfile/FreelancerProfile.API/Dockerfile
    depends_on:
     - freelancer-profile.db
    ports:
     - 52000:80

  client-profile.api:
    image: ${DOCKER_REGISTRY-}clientprofileapi
    build:
      context: .
      dockerfile: src/Services/ClientProfile/ClientProfile.API/Dockerfile
    depends_on:
     - client-profile.db
    ports:
     - 53000:80

  identity.db:
    image: postgres
    restart: always
    environment:
     POSTGRES_USERNAME: postgres
     POSTGRES_PASSWORD: 123456
    volumes:
     - identity-data:/var/lib/postgresql/data
    ports:
     - 40000:5432

  freelancer-profile.db:
    image: postgres
    restart: always
    environment:
     POSTGRES_USERNAME: postgres
     POSTGRES_PASSWORD: 123456
    volumes:
     - freelancer-profile-data:/var/lib/postgresql/data
    ports:
     - 41000:5432

  client-profile.db:
    image: postgres
    restart: always
    environment:
     POSTGRES_USERNAME: postgres
     POSTGRES_PASSWORD: 123456
    volumes:
     - client-profile-data:/var/lib/postgresql/data
    ports:
     - 42000:5432

  web.bff:
    image: ${DOCKER_REGISTRY-}webbff
    build:
      context: .
      dockerfile: src/ApiGateways/Web.Bff/Web.Bff/Dockerfile
    ports:
     - 10000:80

volumes:
 identity-data:
 freelancer-profile-data:
 client-profile-data:
